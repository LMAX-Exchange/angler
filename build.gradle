apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'maven'
apply plugin: 'signing'

group = 'com.lmax'


ext {
    fullName = 'Angler'
    fullDescription = 'A utility for monitoring Linux kernel network statistics'
    teamName = 'LMAX Development Team'
    siteUrl = 'http://github.com/LMAX-Exchange/angler'
    sourceUrl = 'git@github.com:LMAX-Exchange/angler'

    javaCompilerExecutable = System.env['JAVA_HOME'] ? System.env['JAVA_HOME'] + '/bin/javac' : 'javac'

    if (!project.hasProperty('sonatypeUrl')) sonatypeUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
    if (!project.hasProperty('sonatypeUsername')) sonatypeUsername = ''
    if (!project.hasProperty('sonatypePassword')) sonatypePassword = ''
}

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compile 'org.agrona:Agrona:0.5.1'
    testCompile "junit:junit:4.11"
}

version = new Version(major: 1, minor: 0, revision: 3)

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task runExample(dependsOn: 'testClasses', type: JavaExec) {
    main = 'com.lmax.angler.monitoring.network.monitor.example.ExampleApplication'
    classpath = sourceSets.test.runtimeClasspath + sourceSets.main.runtimeClasspath
}

artifacts {
    archives sourcesJar, javadocJar
}




class Version {
    int major = 1, minor = 0, revision = 3

    String toString() {
        "$major.$minor.$revision"
    }
}

checkstyle {
    toolVersion = 6.3
}


def projectPom = {
    name = fullName
    description = fullDescription
    url = siteUrl

    scm {
        url = "scm:$sourceUrl"
        connection = "scm:$sourceUrl"
    }

    licenses {
        license {
            name = 'The Apache Software License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution = 'repo'
        }
    }

    developers {
        developer {
            id = 'team'
            name = teamName
            email = 'lmax-angler@googlegroups.com'
        }
    }
}

install {
    repositories.mavenInstaller.pom.project(projectPom)
}

signing {
    required { gradle.taskGraph.hasTask('uploadArchives') }
    sign configurations.archives
}

uploadArchives {
    repositories.mavenDeployer {
        beforeDeployment { deployment -> signing.signPom(deployment) }

        repository(url: sonatypeUrl) {
            authentication(userName: sonatypeUsername, password: sonatypePassword)
        }

        pom.project(projectPom)
    }
}
